

/*
âœ… What is the Singleton Pattern?
The Singleton Pattern ensures that a class has only one instance and provides a global point of access to it. This is achieved by:

Private constructor (Prevents external instantiation)
Static instance variable (Holds the single instance)
Public method (Provides controlled access to the instance)

âœ… Why Use the Singleton Pattern?
âœ” Prevent multiple instances (Useful for shared resources like database connections, logging, etc.)
âœ” Save memory (Avoid unnecessary object creation)
âœ” Ensure consistency (Only one object controls the system state)
âœ” Thread safety (Ensures controlled access in multi-threaded applications)

âœ… Benefits of Singleton Pattern
ðŸ”¹ Ensures a single instance â€“ Prevents duplication of expensive objects.
ðŸ”¹ Global access point â€“ Provides a central way to access an object.
ðŸ”¹ Efficient resource management â€“ Ideal for database connections, caching, and configuration settings.
ðŸ”¹ Thread safety â€“ Proper implementation prevents concurrency issues.
ðŸ”¹ Prevents reflection & serialization attacks â€“ Especially when using enum-based Singleton.

 */
package creational.singleton;






class Provider{





    public static Provider provider;


    private Provider(){


    }


    public static Provider getProvider() {
        if (provider == null) {
            synchronized (Provider.class) {
                if (provider == null) {
                    provider = new Provider();
                }
            }
        }
        return provider;
    }

    public String provide(String msg){

        return msg;

    }



}

public class main {

    public static void main(String[] args) {

        Provider provider = Provider.getProvider();
        provider.provide("session Factory");



    }
}
